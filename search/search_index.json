{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Welcome to mini-platform's home, here you will have a learning-oriented workshop with the goal to build a Platform on top of Kubernetes focusing on developer experience.</p> <p>I got as inspiration the workshop created by @salaboy called From Monolith to Kubernetes.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Following this Quickstart tutorial, you will get a Platform on top of Kubernetes and know some challenges of creating one. </p>"},{"location":"#before-you-begin","title":"Before you begin","text":"<p>Before all, we need to know what we will build on this workshop:</p> <ol> <li>We will create a command line interface (CLI) with the project cobra to allow a developer to create their applications.</li> </ol> <p>Motivation:</p> <p>Nowadays many companies want to deliver their features faster and faster. In the context of microservices in a big company, almost every day more than one microservice appears, and this microservice is initially a git repository. The developer needs to get a repo in an easy way.</p> <p>Proposal:</p> <p>The proposal here is to create a command line interface to allow the developer to create a git repository. This CLI will be called minictl.</p>"},{"location":"CLI/creating-github-repository/","title":"Hello repository","text":""},{"location":"CLI/creating-minictl/","title":"Hello minictl","text":""},{"location":"CLI/creating-minictl/#before-you-begin","title":"Before you begin","text":"<p>Before all, you need to install:</p> <ul> <li>GoLang version 1.20.4</li> </ul>"},{"location":"CLI/creating-minictl/#creating-the-project","title":"Creating the project","text":"<p>Let's start, create the folder to be the minictl home:</p> <pre><code>    mkdir minictl &amp;&amp; cd minictl\n</code></pre> <p>Init the project with GoLang tooling:</p> <pre><code>    go mod init com.github.mcruzdev.miniplatform.minictl\n</code></pre>"},{"location":"CLI/creating-minictl/#creating-the-root-command","title":"Creating the root command","text":"<p>Install cobra module:</p> <pre><code>    go get -u github.com/spf13/cobra@latest\n</code></pre> <p>Let's to create the main.go file:</p> <p>The following file will be our entrypoint:</p> <pre><code>// main.go\npackage main\nimport (\n\"com.github.mcruzdev.miniplatform.minictl/cmd/minictl\"\n)\nfunc main() {\nminictl.Execute()\n}\n</code></pre> <p>Let's to create the main command (root):</p> <pre><code>// cmd/minictl/minictl.go\npackage minictl\nimport (\n\"fmt\"\n\"github.com/spf13/cobra\"\n)\nvar rootCmd = &amp;cobra.Command{\nUse: \"minictl\",\nRun: func(cmd *cobra.Command, args []string) {\nfmt.Println(\"Running inside minictl\")\n},\n}\nfunc Execute() {\nrootCmd.Execute()\n}\n</code></pre> <p>To build and execute the CLI, do:</p> <ol> <li><code>go build main.go</code></li> <li><code>./main.go</code></li> </ol> <p>The output should look like:</p> <pre><code>Running inside minictl\n</code></pre>"},{"location":"CLI/creating-minictl/#creating-the-create-application-command","title":"Creating the create application command","text":"<p>To organize our CLI project, let's create a page for create command:</p> <p>Inside the root directory, run the following command:</p> <pre><code>    mkdir create &amp;&amp; touch create/create.go &amp;&amp; touch create/application.go\n</code></pre> <p>First, we will create the command for command <code>create</code>, we can have some sub-commands.</p> <pre><code>// create/create.go\npackage create\nimport (\n\"fmt\"\n\"github.com/spf13/cobra\"\n)\n// CommandCreate handles minictl create command.\nfunc CommandCreate() *cobra.Command {\nvar createCmd = &amp;cobra.Command{\nUse: \"create\",\nRun: func(cmd *cobra.Command, args []string) {\nfmt.Println(\"Running create command\")\n},\n}\ncreateCmd.AddCommand(CommandCreateApplication())\nreturn createCmd\n}\n</code></pre> <p>On create/application.go we will handle the command <code>minictl create application --name=minictl-api</code> command.</p> <pre><code>// create/application.go\npackage create\nimport (\n\"fmt\"\n\"github.com/spf13/cobra\"\n\"log\"\n)\nvar applicationName string\nfunc CommandCreateApplication() *cobra.Command {\nvar createApplicationCmd = &amp;cobra.Command{\nUse: \"application\",\nRun: func(cmd *cobra.Command, args []string) {\nlog.Println(fmt.Sprintf(\"Creating application with name '%s'\", applicationName))\n},\n}\ncreateApplicationCmd.PersistentFlags().StringVar(&amp;applicationName, \"name\", \"\", \"--name=application-name\")\n_ = createApplicationCmd.MarkPersistentFlagRequired(\"name\")\nreturn createApplicationCmd\n}\n</code></pre> <p>Build the CLI and run again with <code>./main create application --name=my-application</code> to see the output.</p> <p>The output should looks like it:</p> <pre><code>2023/05/11 21:34:17 Creating application with name 'my-application'\n</code></pre>"}]}